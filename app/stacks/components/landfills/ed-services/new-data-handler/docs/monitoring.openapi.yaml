openapi: 3.0.1
info:
  title: Monitor Service API
  description: API for managing monitors for municipalities.
  version: 2.0.0
  

paths:
  /monitoring:
    post:
      summary: Create a new monitor
      description: Creates a new monitor for a specific municipality with a specific type of monitoring.
      requestBody:
        description: The information needed to create a new monitor
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewMonitorRequest'
      responses:
        201:
          description: Monitor created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Monitor'
        400:
          description: Bad request, missing or invalid parameters
        500:
          description: Internal server error

    get:
      summary: Retrieve all monitors
      description: Retrieve a list of all monitors, with optional filtering. Each monitor includes details about the monitored municipality, type of monitoring, and the date when the monitoring was requested.
      parameters:
        - name: idMunicipality
          in: query
          description: Filter monitors by municipality ID
          required: false
          schema:
            type: integer
        - name: type
          in: query
          description: Filter monitors by the type of monitoring (e.g., WILDFIRE)
          required: false
          schema:
            type: string
            enum: [WILDFIRE]
        - name: longitude
          in: query
          description: Filter monitor by municipality not known, looking up a spatial point to get the municipality, also requires longitude to work
          schema:
            type: number
        - name: latitude
          in: query
          description: Filter monitor by municipality not known, looking up a spatial point to get the municipality, also requires latitude to work
          schema:
            type: number
      responses:
        200:
          description: A list of monitors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Monitor'
        500:
          description: Internal server error

  /monitoring/{monitorId}:
    delete:
      summary: Remove a monitor
      description: Deletes an existing monitor identified by the monitor ID.
      parameters:
        - name: monitorId
          in: path
          required: true
          description: ID of the monitor to delete
          schema:
            type: integer
      responses:
        204:
          description: Monitor deleted successfully
        404:
          description: Monitor not found
        500:
          description: Internal server error

components:
  schemas:
    NewMonitorRequest:
      type: object
      required:
        - idMunicipality
        - type
      properties:
        idMunicipality:
          type: integer
          description: The ID of the municipality to be monitored
        type:
          type: string
          description: The type of monitoring
          enum:
            - WILDFIRE

    Monitor:
      type: object
      properties:
        id:
          type: integer
          description: The unique identifier of the monitor
        idMunicipality:
          type: integer
          description: The ID of the municipality being monitored
        type:
          type: string
          description: The type of monitoring (e.g., WILDFIRE)
          enum:
            - WILDFIRE
        dateRequested:
          type: string
          format: date-time
          description: The date when the monitoring was requested
